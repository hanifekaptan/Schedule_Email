----------------------------------------------------------------------------------------------------------------------------------------

Description:

    It is an application written with Python that allows you to send a post-dated letter via Gmail on the target date.

----------------------------------------------------------------------------------------------------------------------------------------

Files in project:

    1. Main.py

    2. App.py

    3. Settings.py

    4. Task.py

    5. AppWindow.py (GUI)

    6. SettingsWindow.py [GUI]

    7. icons_rc.py (GUI)

    8. emailInfo.json

----------------------------------------------------------------------------------------------------------------------------------------

A. Main.py (file):

    This file contains codes that run the application and disconnect PostgreSQL after the application is closes.



B. App.py (file):

    This file contains codes that enable the application to work.


    i. App (class):


        1. begginingProccess() (method) -> None

            Basic operations when the application is started

            Args:
                parent : @App

            Returns:
                None

            
        2. updatesEmailList() (method) -> None

            Method that updates the email list in the Letter Page after inserting and deleting operations

            Args:
                parent : @App

            Returns:
                None


        3. openSettings() (method) -> None

            Method that opens the Settings Window

            Args:
                parent : @App

            Returns:
                None


        4. openLetter() (method) -> None

            Method that opens the Letter Page

            Args:
                parent : @App

            Returns:
                None


        5. greeting() (method) -> None

            Method that changes the content of the e-mail when the selected e-mail address changes in the Letter Page

            Args:
                parent : @App

            Returns:
                None


        6. control() (method) ->

            Method that checks whether the information and email are NaN and whether the time is in the past or present
        
            Args:
                parent : @App

            Returns:
                None


        7. addData() (method) -> None

            Method that adds datas to the letter_info table after the letter is sent
        
            Args:
                parent : @App

            Returns:
                None


        8. idValue() (method) -> 

            Method that takes max id value for insertion into the letter_info table or returns 0 as the id value if the letter_info table is an empty table.
        
            Args:
                parent : @App

            Returns:
                int : total number of letter


        9. confirmation() (method) -> None

            Method that displays a message box to get confirmation from user before sending operation.
        
            Args:
                parent : @App
                person : str
                date : datetime.datetime

            Returns:
                None


        10. isFull() (method) -> bool

            Method that checks whether the user entered a text of at least 2 characters.
        
            Args:
                parent : @App

            Returns:
                bool : wheter the lenght of the text is less than 2 or not.


        11. isPastOrNow() (method) -> bool

            Method that checks whether the time is in the past or present.
        
            Args:
                parent : @App

            Returns:
                bool : wheter the time is in the past or present.


        12. backHomePage() (method) -> None

            Method that allows returning to the Home Page in the App Window.

            Args:
                parent : @App

            Returns:
                None


        13. noneValueError() (method) -> None

            Args:
                parent : @App

            Returns:
                None

        14. timeError() (method) -> None

            Args:
                parent : @App

            Returns:
                None

        15. successful() (method) -> None

            Args:
                parent : @App

            Returns:
                None



B. Settings.py (file):

    This file contains codes that settings of application.


    i. Settings (class):


        1. begginingProccess() (method) -> None

            Basic operations when the application is started.

            Args:
                parent : @Settings

            Returns:
                None


        2. mails() (method) -> list

            Method that returns the current e-mail list.

            Args:
                parent : @Settings

            Returns:
                list : e-mail list


        3. defaultMail() (method) -> str

            Method that returns the current default e-mail.

            Args:
                parent : @Settings

            Returns:
                str : current default mail


        4. isDefaultErr() (method) -> bool
        
            Method that checks whether default e-mail is more or less than 1.
        
            Args:
                parent : @Settings

            Returns:
                bool : whether lenght of default e-mail is more or less than 1.

        
        5. autoDefault() (method) -> None
        
            Method that assigns the first e-mail in the e-mail list as the default e-mail value.

            Args:
                parent : @Settings

            Returns:
                None

        
        6. isListEmpty() (method) -> bool

            Method that checks whether lenght of the mail list is less then 1.
        
            Args:
                parent : @Settings

            Returns:
                bool : whether lenght of the mail list is less then 1

        
        7. reorganize() (method) -> None

            Method that gives false to those whose default value is true.
        
            Args:
                parent : @Settings

            Returns:
                None

        
        8. saveChange() (method) -> None

            Method that saves changes.
        
            Args:
                parent : @Settings

            Returns:
                None
        

        9. openInsertPage() (method) -> None

            Method that opens the Add Page.
        
            Args:
                parent : @Settings

            Returns:
                None

        
        10. validLowChar() (method) -> None

            Method that translates invalid characters in the Add Page.
        
            Args:
                parent : @Settings

            Returns:
                None

        
        11. control() (method) -> None

            Method that checks whether the information is validly before adding a new e-mail address.
        
            Args:
                parent : @Settings

            Returns:
                None

        
        12. isFull() (method) -> bool
        
            Method that checks whether the user entered a text of at least 2 characters.
        
            Args:
                parent : @Settings

            Returns:
                bool : whether the name, e-mail and lastname values are less than 2.

        
        13. isCharOk() (method) -> bool
        
            Method that checks whether the data of name and lastname are in character type
            and whether the data of mail is in character or number type.

            Args:
                parent : @Settings

            Returns:
                bool : whether the name and lastname are alphabetical and the mail has valid characters

        
        14. isFormatOk() (method) -> bool

            Method that checks whether data of mail is valid format:
                a. It must contain only one '@' sign
                b. It must not start with '.'
                c. It must not contain two consecutive '.'
                d. The lenght of the username must be at least 6 and at most 30
                e. It must have '.com' extension.
        
            Args:
                parent : @Settings

            Returns:
                bool : whether data of mail is valid format

        
        15. addNewMail() (method) -> None

            Method that adds a new e-mail address.
        
            Args:
                parent : @Settings

            Returns:
                None

        
        16. deleteEmail() (method) -> None

        Method that performs the delete operation based on the e-mail address received from the user
        If the deleted items is also the default email, it assigns a new value.
        
            Args:
                parent : @Settings

            Returns:
                None

        
        17. openDelPage() (method) -> None

            Method that opens the Delete Page.
        
            Args:
                parent : @Settings

            Returns:
                None

        
        18. cancel() (method) -> None

            Method that allows returning to the Main Page in the Settings Window.
        
            Args:
                parent : @Settings

            Returns:
                None

        
        19. updateCombobox() (method) -> None
        
            Method that updates the email lists in the Settings Window after
            inserting and deleting operations.

            Args:
                parent : @Settings

            Returns:
                None

        
        20. toConvertValidFormat() (method) -> str
        
            Method that converts the output we obtain with the command cur.fetchone() into the format to be used.

            Args:
                parent : @Settings
                expression : str

            Returns:
                str : expression

        
        21. connect() (method) -> None

            Method that connections PostgreSQL.
        
            Args:
                parent : @Settings

            Returns:
                None

        
        22. disconnect() (method) -> None

            Method that disconnections PostgreSQL.
        
            Args:
                parent : @Settings

            Returns:
                None

        
        23. noneValueError() (method) -> None
        
            Args:
                parent : @Settings

            Returns:
                None

        
        24. charValueError() (method) -> None
        
            Args:
                parent : @Settings

            Returns:
                None

        
        25. invalidValueError() (method) -> None
        
            Args:
                parent : @Settings

            Returns:
                None

        
        26. emptyListError() (method) -> None
        
            Args:
                parent : @Settings

            Returns:
                None

        
        27. successful() (method) -> None

            Args:
                parent : @Settings

            Returns:
                None

D. Task.py (file):

    This file contains codes that send the mail.


    i. Task (class):


        1. connect() (method) -> None

            Method that connections PostgreSQL.

            Args:
                parent : @App

            Returns:
                None


        2. disconnect() (method) -> None

            Method that disconnections PostgreSQL.

            Args:
                parent : @App

            Returns:
                None


        3. send() (method) -> None

            Method that makes the sending operations and deletes sent letter.

            Args:
                parent : @App
                dt : datetime (in PostgreSQL)

            Returns:
                None


        4. contentInfo() (method) -> list

            Method that returns info containing Email, Title and Message as a list.
        
            Args:
                parent : @App

            Returns:
                list : list of email, title and message


        5. content() (method) -> EmailMessage

            Method that prepares e-mail content.

            Args:
                parent : @App

            Returns:
                EmailMessage : an object of EmailMessage


        6. sendWithSMTP() (method) -> None

            Method that sends the e-mail with SMTP.

            Args:
                parent : @App

            Returns:
                None


        7. proccess() (method) -> None

            Method that checks whether the target date is today and directs you to work if it is today.
        
            Args:
                parent : @App

            Returns:
                None

        8. isTableEmpty() (method) -> bool

            Method that checks whether the letter_info table is null.

            Args:
                parent : @App

            Returns:
                bool : whether the letter_info table is null


        9. isConnNone() (method) -> bool

            Method that checks whether the conn is connect.

            Args:
                parent : @App

            Returns:
                bool : whether the conn is connect
